// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iktakahiro/oniongo/internal/infrastructure/ent/entgen/projectschema"
)

// ProjectSchemaCreate is the builder for creating a ProjectSchema entity.
type ProjectSchemaCreate struct {
	config
	mutation *ProjectSchemaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// Mutation returns the ProjectSchemaMutation object of the builder.
func (psc *ProjectSchemaCreate) Mutation() *ProjectSchemaMutation {
	return psc.mutation
}

// Save creates the ProjectSchema in the database.
func (psc *ProjectSchemaCreate) Save(ctx context.Context) (*ProjectSchema, error) {
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ProjectSchemaCreate) SaveX(ctx context.Context) *ProjectSchema {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ProjectSchemaCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ProjectSchemaCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *ProjectSchemaCreate) check() error {
	return nil
}

func (psc *ProjectSchemaCreate) sqlSave(ctx context.Context) (*ProjectSchema, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ProjectSchemaCreate) createSpec() (*ProjectSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectSchema{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(projectschema.Table, sqlgraph.NewFieldSpec(projectschema.FieldID, field.TypeInt))
	)
	_spec.Schema = psc.schemaConfig.ProjectSchema
	_spec.OnConflict = psc.conflict
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectSchema.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (psc *ProjectSchemaCreate) OnConflict(opts ...sql.ConflictOption) *ProjectSchemaUpsertOne {
	psc.conflict = opts
	return &ProjectSchemaUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectSchema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *ProjectSchemaCreate) OnConflictColumns(columns ...string) *ProjectSchemaUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &ProjectSchemaUpsertOne{
		create: psc,
	}
}

type (
	// ProjectSchemaUpsertOne is the builder for "upsert"-ing
	//  one ProjectSchema node.
	ProjectSchemaUpsertOne struct {
		create *ProjectSchemaCreate
	}

	// ProjectSchemaUpsert is the "OnConflict" setter.
	ProjectSchemaUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProjectSchema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProjectSchemaUpsertOne) UpdateNewValues() *ProjectSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectSchema.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProjectSchemaUpsertOne) Ignore() *ProjectSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectSchemaUpsertOne) DoNothing() *ProjectSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectSchemaCreate.OnConflict
// documentation for more info.
func (u *ProjectSchemaUpsertOne) Update(set func(*ProjectSchemaUpsert)) *ProjectSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectSchemaUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *ProjectSchemaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for ProjectSchemaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectSchemaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProjectSchemaUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProjectSchemaUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProjectSchemaCreateBulk is the builder for creating many ProjectSchema entities in bulk.
type ProjectSchemaCreateBulk struct {
	config
	err      error
	builders []*ProjectSchemaCreate
	conflict []sql.ConflictOption
}

// Save creates the ProjectSchema entities in the database.
func (pscb *ProjectSchemaCreateBulk) Save(ctx context.Context) ([]*ProjectSchema, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ProjectSchema, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ProjectSchemaCreateBulk) SaveX(ctx context.Context) []*ProjectSchema {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ProjectSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ProjectSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProjectSchema.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (pscb *ProjectSchemaCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProjectSchemaUpsertBulk {
	pscb.conflict = opts
	return &ProjectSchemaUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProjectSchema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *ProjectSchemaCreateBulk) OnConflictColumns(columns ...string) *ProjectSchemaUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &ProjectSchemaUpsertBulk{
		create: pscb,
	}
}

// ProjectSchemaUpsertBulk is the builder for "upsert"-ing
// a bulk of ProjectSchema nodes.
type ProjectSchemaUpsertBulk struct {
	create *ProjectSchemaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProjectSchema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProjectSchemaUpsertBulk) UpdateNewValues() *ProjectSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProjectSchema.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProjectSchemaUpsertBulk) Ignore() *ProjectSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProjectSchemaUpsertBulk) DoNothing() *ProjectSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProjectSchemaCreateBulk.OnConflict
// documentation for more info.
func (u *ProjectSchemaUpsertBulk) Update(set func(*ProjectSchemaUpsert)) *ProjectSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProjectSchemaUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *ProjectSchemaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the ProjectSchemaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for ProjectSchemaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProjectSchemaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
