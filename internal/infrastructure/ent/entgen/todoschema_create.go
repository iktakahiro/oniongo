// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/iktakahiro/oniongo/internal/infrastructure/ent/entgen/todoschema"
)

// TodoSchemaCreate is the builder for creating a TodoSchema entity.
type TodoSchemaCreate struct {
	config
	mutation *TodoSchemaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (tsc *TodoSchemaCreate) SetTitle(s string) *TodoSchemaCreate {
	tsc.mutation.SetTitle(s)
	return tsc
}

// SetBody sets the "body" field.
func (tsc *TodoSchemaCreate) SetBody(s string) *TodoSchemaCreate {
	tsc.mutation.SetBody(s)
	return tsc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (tsc *TodoSchemaCreate) SetNillableBody(s *string) *TodoSchemaCreate {
	if s != nil {
		tsc.SetBody(*s)
	}
	return tsc
}

// SetStatus sets the "status" field.
func (tsc *TodoSchemaCreate) SetStatus(t todoschema.Status) *TodoSchemaCreate {
	tsc.mutation.SetStatus(t)
	return tsc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tsc *TodoSchemaCreate) SetNillableStatus(t *todoschema.Status) *TodoSchemaCreate {
	if t != nil {
		tsc.SetStatus(*t)
	}
	return tsc
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TodoSchemaCreate) SetCreatedAt(t time.Time) *TodoSchemaCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TodoSchemaCreate) SetNillableCreatedAt(t *time.Time) *TodoSchemaCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TodoSchemaCreate) SetUpdatedAt(t time.Time) *TodoSchemaCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TodoSchemaCreate) SetNillableUpdatedAt(t *time.Time) *TodoSchemaCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tsc *TodoSchemaCreate) SetDeletedAt(t time.Time) *TodoSchemaCreate {
	tsc.mutation.SetDeletedAt(t)
	return tsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsc *TodoSchemaCreate) SetNillableDeletedAt(t *time.Time) *TodoSchemaCreate {
	if t != nil {
		tsc.SetDeletedAt(*t)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TodoSchemaCreate) SetID(u uuid.UUID) *TodoSchemaCreate {
	tsc.mutation.SetID(u)
	return tsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsc *TodoSchemaCreate) SetNillableID(u *uuid.UUID) *TodoSchemaCreate {
	if u != nil {
		tsc.SetID(*u)
	}
	return tsc
}

// Mutation returns the TodoSchemaMutation object of the builder.
func (tsc *TodoSchemaCreate) Mutation() *TodoSchemaMutation {
	return tsc.mutation
}

// Save creates the TodoSchema in the database.
func (tsc *TodoSchemaCreate) Save(ctx context.Context) (*TodoSchema, error) {
	tsc.defaults()
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TodoSchemaCreate) SaveX(ctx context.Context) *TodoSchema {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TodoSchemaCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TodoSchemaCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TodoSchemaCreate) defaults() {
	if _, ok := tsc.mutation.Status(); !ok {
		v := todoschema.DefaultStatus
		tsc.mutation.SetStatus(v)
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		v := todoschema.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		v := todoschema.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.ID(); !ok {
		v := todoschema.DefaultID()
		tsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TodoSchemaCreate) check() error {
	if _, ok := tsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entgen: missing required field "TodoSchema.title"`)}
	}
	if v, ok := tsc.mutation.Title(); ok {
		if err := todoschema.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`entgen: validator failed for field "TodoSchema.title": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entgen: missing required field "TodoSchema.status"`)}
	}
	if v, ok := tsc.mutation.Status(); ok {
		if err := todoschema.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entgen: validator failed for field "TodoSchema.status": %w`, err)}
		}
	}
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entgen: missing required field "TodoSchema.created_at"`)}
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entgen: missing required field "TodoSchema.updated_at"`)}
	}
	return nil
}

func (tsc *TodoSchemaCreate) sqlSave(ctx context.Context) (*TodoSchema, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TodoSchemaCreate) createSpec() (*TodoSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &TodoSchema{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(todoschema.Table, sqlgraph.NewFieldSpec(todoschema.FieldID, field.TypeUUID))
	)
	_spec.Schema = tsc.schemaConfig.TodoSchema
	_spec.OnConflict = tsc.conflict
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tsc.mutation.Title(); ok {
		_spec.SetField(todoschema.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tsc.mutation.Body(); ok {
		_spec.SetField(todoschema.FieldBody, field.TypeString, value)
		_node.Body = &value
	}
	if value, ok := tsc.mutation.Status(); ok {
		_spec.SetField(todoschema.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(todoschema.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.SetField(todoschema.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tsc.mutation.DeletedAt(); ok {
		_spec.SetField(todoschema.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoSchema.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoSchemaUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (tsc *TodoSchemaCreate) OnConflict(opts ...sql.ConflictOption) *TodoSchemaUpsertOne {
	tsc.conflict = opts
	return &TodoSchemaUpsertOne{
		create: tsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoSchema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tsc *TodoSchemaCreate) OnConflictColumns(columns ...string) *TodoSchemaUpsertOne {
	tsc.conflict = append(tsc.conflict, sql.ConflictColumns(columns...))
	return &TodoSchemaUpsertOne{
		create: tsc,
	}
}

type (
	// TodoSchemaUpsertOne is the builder for "upsert"-ing
	//  one TodoSchema node.
	TodoSchemaUpsertOne struct {
		create *TodoSchemaCreate
	}

	// TodoSchemaUpsert is the "OnConflict" setter.
	TodoSchemaUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *TodoSchemaUpsert) SetTitle(v string) *TodoSchemaUpsert {
	u.Set(todoschema.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TodoSchemaUpsert) UpdateTitle() *TodoSchemaUpsert {
	u.SetExcluded(todoschema.FieldTitle)
	return u
}

// SetBody sets the "body" field.
func (u *TodoSchemaUpsert) SetBody(v string) *TodoSchemaUpsert {
	u.Set(todoschema.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TodoSchemaUpsert) UpdateBody() *TodoSchemaUpsert {
	u.SetExcluded(todoschema.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *TodoSchemaUpsert) ClearBody() *TodoSchemaUpsert {
	u.SetNull(todoschema.FieldBody)
	return u
}

// SetStatus sets the "status" field.
func (u *TodoSchemaUpsert) SetStatus(v todoschema.Status) *TodoSchemaUpsert {
	u.Set(todoschema.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TodoSchemaUpsert) UpdateStatus() *TodoSchemaUpsert {
	u.SetExcluded(todoschema.FieldStatus)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TodoSchemaUpsert) SetCreatedAt(v time.Time) *TodoSchemaUpsert {
	u.Set(todoschema.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TodoSchemaUpsert) UpdateCreatedAt() *TodoSchemaUpsert {
	u.SetExcluded(todoschema.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoSchemaUpsert) SetUpdatedAt(v time.Time) *TodoSchemaUpsert {
	u.Set(todoschema.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoSchemaUpsert) UpdateUpdatedAt() *TodoSchemaUpsert {
	u.SetExcluded(todoschema.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TodoSchemaUpsert) SetDeletedAt(v time.Time) *TodoSchemaUpsert {
	u.Set(todoschema.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TodoSchemaUpsert) UpdateDeletedAt() *TodoSchemaUpsert {
	u.SetExcluded(todoschema.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TodoSchemaUpsert) ClearDeletedAt() *TodoSchemaUpsert {
	u.SetNull(todoschema.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TodoSchema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(todoschema.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TodoSchemaUpsertOne) UpdateNewValues() *TodoSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(todoschema.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoSchema.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TodoSchemaUpsertOne) Ignore() *TodoSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoSchemaUpsertOne) DoNothing() *TodoSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoSchemaCreate.OnConflict
// documentation for more info.
func (u *TodoSchemaUpsertOne) Update(set func(*TodoSchemaUpsert)) *TodoSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoSchemaUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *TodoSchemaUpsertOne) SetTitle(v string) *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TodoSchemaUpsertOne) UpdateTitle() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *TodoSchemaUpsertOne) SetBody(v string) *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TodoSchemaUpsertOne) UpdateBody() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *TodoSchemaUpsertOne) ClearBody() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.ClearBody()
	})
}

// SetStatus sets the "status" field.
func (u *TodoSchemaUpsertOne) SetStatus(v todoschema.Status) *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TodoSchemaUpsertOne) UpdateStatus() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TodoSchemaUpsertOne) SetCreatedAt(v time.Time) *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TodoSchemaUpsertOne) UpdateCreatedAt() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoSchemaUpsertOne) SetUpdatedAt(v time.Time) *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoSchemaUpsertOne) UpdateUpdatedAt() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TodoSchemaUpsertOne) SetDeletedAt(v time.Time) *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TodoSchemaUpsertOne) UpdateDeletedAt() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TodoSchemaUpsertOne) ClearDeletedAt() *TodoSchemaUpsertOne {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TodoSchemaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TodoSchemaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoSchemaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TodoSchemaUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TodoSchemaUpsertOne.ID is not supported by MySQL driver. Use TodoSchemaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TodoSchemaUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TodoSchemaCreateBulk is the builder for creating many TodoSchema entities in bulk.
type TodoSchemaCreateBulk struct {
	config
	err      error
	builders []*TodoSchemaCreate
	conflict []sql.ConflictOption
}

// Save creates the TodoSchema entities in the database.
func (tscb *TodoSchemaCreateBulk) Save(ctx context.Context) ([]*TodoSchema, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TodoSchema, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TodoSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TodoSchemaCreateBulk) SaveX(ctx context.Context) []*TodoSchema {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TodoSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TodoSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TodoSchema.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TodoSchemaUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (tscb *TodoSchemaCreateBulk) OnConflict(opts ...sql.ConflictOption) *TodoSchemaUpsertBulk {
	tscb.conflict = opts
	return &TodoSchemaUpsertBulk{
		create: tscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TodoSchema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tscb *TodoSchemaCreateBulk) OnConflictColumns(columns ...string) *TodoSchemaUpsertBulk {
	tscb.conflict = append(tscb.conflict, sql.ConflictColumns(columns...))
	return &TodoSchemaUpsertBulk{
		create: tscb,
	}
}

// TodoSchemaUpsertBulk is the builder for "upsert"-ing
// a bulk of TodoSchema nodes.
type TodoSchemaUpsertBulk struct {
	create *TodoSchemaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TodoSchema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(todoschema.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TodoSchemaUpsertBulk) UpdateNewValues() *TodoSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(todoschema.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TodoSchema.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TodoSchemaUpsertBulk) Ignore() *TodoSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TodoSchemaUpsertBulk) DoNothing() *TodoSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TodoSchemaCreateBulk.OnConflict
// documentation for more info.
func (u *TodoSchemaUpsertBulk) Update(set func(*TodoSchemaUpsert)) *TodoSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TodoSchemaUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *TodoSchemaUpsertBulk) SetTitle(v string) *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TodoSchemaUpsertBulk) UpdateTitle() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateTitle()
	})
}

// SetBody sets the "body" field.
func (u *TodoSchemaUpsertBulk) SetBody(v string) *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TodoSchemaUpsertBulk) UpdateBody() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *TodoSchemaUpsertBulk) ClearBody() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.ClearBody()
	})
}

// SetStatus sets the "status" field.
func (u *TodoSchemaUpsertBulk) SetStatus(v todoschema.Status) *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TodoSchemaUpsertBulk) UpdateStatus() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TodoSchemaUpsertBulk) SetCreatedAt(v time.Time) *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TodoSchemaUpsertBulk) UpdateCreatedAt() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TodoSchemaUpsertBulk) SetUpdatedAt(v time.Time) *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TodoSchemaUpsertBulk) UpdateUpdatedAt() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TodoSchemaUpsertBulk) SetDeletedAt(v time.Time) *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TodoSchemaUpsertBulk) UpdateDeletedAt() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TodoSchemaUpsertBulk) ClearDeletedAt() *TodoSchemaUpsertBulk {
	return u.Update(func(s *TodoSchemaUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TodoSchemaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TodoSchemaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TodoSchemaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TodoSchemaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
