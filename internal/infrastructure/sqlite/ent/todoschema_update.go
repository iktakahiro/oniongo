// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/iktakahiro/oniongo/internal/infrastructure/sqlite/ent/internal"
	"github.com/iktakahiro/oniongo/internal/infrastructure/sqlite/ent/predicate"
	"github.com/iktakahiro/oniongo/internal/infrastructure/sqlite/ent/todoschema"
)

// TodoSchemaUpdate is the builder for updating TodoSchema entities.
type TodoSchemaUpdate struct {
	config
	hooks     []Hook
	mutation  *TodoSchemaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TodoSchemaUpdate builder.
func (tsu *TodoSchemaUpdate) Where(ps ...predicate.TodoSchema) *TodoSchemaUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TodoSchemaUpdate) SetUpdatedAt(t time.Time) *TodoSchemaUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// SetTitle sets the "title" field.
func (tsu *TodoSchemaUpdate) SetTitle(s string) *TodoSchemaUpdate {
	tsu.mutation.SetTitle(s)
	return tsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tsu *TodoSchemaUpdate) SetNillableTitle(s *string) *TodoSchemaUpdate {
	if s != nil {
		tsu.SetTitle(*s)
	}
	return tsu
}

// SetBody sets the "body" field.
func (tsu *TodoSchemaUpdate) SetBody(s string) *TodoSchemaUpdate {
	tsu.mutation.SetBody(s)
	return tsu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (tsu *TodoSchemaUpdate) SetNillableBody(s *string) *TodoSchemaUpdate {
	if s != nil {
		tsu.SetBody(*s)
	}
	return tsu
}

// Mutation returns the TodoSchemaMutation object of the builder.
func (tsu *TodoSchemaUpdate) Mutation() *TodoSchemaMutation {
	return tsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TodoSchemaUpdate) Save(ctx context.Context) (int, error) {
	tsu.defaults()
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TodoSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TodoSchemaUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TodoSchemaUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TodoSchemaUpdate) defaults() {
	if _, ok := tsu.mutation.UpdatedAt(); !ok {
		v := todoschema.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tsu *TodoSchemaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TodoSchemaUpdate {
	tsu.modifiers = append(tsu.modifiers, modifiers...)
	return tsu
}

func (tsu *TodoSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(todoschema.Table, todoschema.Columns, sqlgraph.NewFieldSpec(todoschema.FieldID, field.TypeUUID))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(todoschema.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.Title(); ok {
		_spec.SetField(todoschema.FieldTitle, field.TypeString, value)
	}
	if value, ok := tsu.mutation.Body(); ok {
		_spec.SetField(todoschema.FieldBody, field.TypeString, value)
	}
	_spec.Node.Schema = tsu.schemaConfig.TodoSchema
	ctx = internal.NewSchemaConfigContext(ctx, tsu.schemaConfig)
	_spec.AddModifiers(tsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TodoSchemaUpdateOne is the builder for updating a single TodoSchema entity.
type TodoSchemaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TodoSchemaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TodoSchemaUpdateOne) SetUpdatedAt(t time.Time) *TodoSchemaUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// SetTitle sets the "title" field.
func (tsuo *TodoSchemaUpdateOne) SetTitle(s string) *TodoSchemaUpdateOne {
	tsuo.mutation.SetTitle(s)
	return tsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tsuo *TodoSchemaUpdateOne) SetNillableTitle(s *string) *TodoSchemaUpdateOne {
	if s != nil {
		tsuo.SetTitle(*s)
	}
	return tsuo
}

// SetBody sets the "body" field.
func (tsuo *TodoSchemaUpdateOne) SetBody(s string) *TodoSchemaUpdateOne {
	tsuo.mutation.SetBody(s)
	return tsuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (tsuo *TodoSchemaUpdateOne) SetNillableBody(s *string) *TodoSchemaUpdateOne {
	if s != nil {
		tsuo.SetBody(*s)
	}
	return tsuo
}

// Mutation returns the TodoSchemaMutation object of the builder.
func (tsuo *TodoSchemaUpdateOne) Mutation() *TodoSchemaMutation {
	return tsuo.mutation
}

// Where appends a list predicates to the TodoSchemaUpdate builder.
func (tsuo *TodoSchemaUpdateOne) Where(ps ...predicate.TodoSchema) *TodoSchemaUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TodoSchemaUpdateOne) Select(field string, fields ...string) *TodoSchemaUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TodoSchema entity.
func (tsuo *TodoSchemaUpdateOne) Save(ctx context.Context) (*TodoSchema, error) {
	tsuo.defaults()
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TodoSchemaUpdateOne) SaveX(ctx context.Context) *TodoSchema {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TodoSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TodoSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TodoSchemaUpdateOne) defaults() {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok {
		v := todoschema.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tsuo *TodoSchemaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TodoSchemaUpdateOne {
	tsuo.modifiers = append(tsuo.modifiers, modifiers...)
	return tsuo
}

func (tsuo *TodoSchemaUpdateOne) sqlSave(ctx context.Context) (_node *TodoSchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(todoschema.Table, todoschema.Columns, sqlgraph.NewFieldSpec(todoschema.FieldID, field.TypeUUID))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TodoSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todoschema.FieldID)
		for _, f := range fields {
			if !todoschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todoschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(todoschema.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.Title(); ok {
		_spec.SetField(todoschema.FieldTitle, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.Body(); ok {
		_spec.SetField(todoschema.FieldBody, field.TypeString, value)
	}
	_spec.Node.Schema = tsuo.schemaConfig.TodoSchema
	ctx = internal.NewSchemaConfigContext(ctx, tsuo.schemaConfig)
	_spec.AddModifiers(tsuo.modifiers...)
	_node = &TodoSchema{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
