// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/iktakahiro/oniongo/internal/infrastructure/sqlite/ent/todoschema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   todoschema.Table,
			Columns: todoschema.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: todoschema.FieldID,
			},
		},
		Type: "TodoSchema",
		Fields: map[string]*sqlgraph.FieldSpec{
			todoschema.FieldCreatedAt: {Type: field.TypeTime, Column: todoschema.FieldCreatedAt},
			todoschema.FieldUpdatedAt: {Type: field.TypeTime, Column: todoschema.FieldUpdatedAt},
			todoschema.FieldDeletedAt: {Type: field.TypeTime, Column: todoschema.FieldDeletedAt},
			todoschema.FieldTitle:     {Type: field.TypeString, Column: todoschema.FieldTitle},
			todoschema.FieldBody:      {Type: field.TypeString, Column: todoschema.FieldBody},
			todoschema.FieldStatus:    {Type: field.TypeEnum, Column: todoschema.FieldStatus},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (tsq *TodoSchemaQuery) addPredicate(pred func(s *sql.Selector)) {
	tsq.predicates = append(tsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TodoSchemaQuery builder.
func (tsq *TodoSchemaQuery) Filter() *TodoSchemaFilter {
	return &TodoSchemaFilter{config: tsq.config, predicateAdder: tsq}
}

// addPredicate implements the predicateAdder interface.
func (m *TodoSchemaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TodoSchemaMutation builder.
func (m *TodoSchemaMutation) Filter() *TodoSchemaFilter {
	return &TodoSchemaFilter{config: m.config, predicateAdder: m}
}

// TodoSchemaFilter provides a generic filtering capability at runtime for TodoSchemaQuery.
type TodoSchemaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TodoSchemaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TodoSchemaFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(todoschema.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TodoSchemaFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(todoschema.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *TodoSchemaFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(todoschema.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *TodoSchemaFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(todoschema.FieldDeletedAt))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *TodoSchemaFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(todoschema.FieldTitle))
}

// WhereBody applies the entql string predicate on the body field.
func (f *TodoSchemaFilter) WhereBody(p entql.StringP) {
	f.Where(p.Field(todoschema.FieldBody))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TodoSchemaFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(todoschema.FieldStatus))
}
