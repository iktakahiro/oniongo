// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/iktakahiro/oniongo/internal/infrastructure/sqlite/ent/todoschema"
)

// TodoSchema is the model entity for the TodoSchema schema.
type TodoSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Status holds the value of the "status" field.
	Status       todoschema.Status `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case todoschema.FieldTitle, todoschema.FieldBody, todoschema.FieldStatus:
			values[i] = new(sql.NullString)
		case todoschema.FieldCreatedAt, todoschema.FieldUpdatedAt, todoschema.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case todoschema.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoSchema fields.
func (ts *TodoSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todoschema.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ts.ID = *value
			}
		case todoschema.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ts.CreatedAt = value.Time
			}
		case todoschema.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ts.UpdatedAt = value.Time
			}
		case todoschema.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ts.DeletedAt = value.Time
			}
		case todoschema.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ts.Title = value.String
			}
		case todoschema.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				ts.Body = value.String
			}
		case todoschema.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ts.Status = todoschema.Status(value.String)
			}
		default:
			ts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TodoSchema.
// This includes values selected through modifiers, order, etc.
func (ts *TodoSchema) Value(name string) (ent.Value, error) {
	return ts.selectValues.Get(name)
}

// Update returns a builder for updating this TodoSchema.
// Note that you need to call TodoSchema.Unwrap() before calling this method if this TodoSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TodoSchema) Update() *TodoSchemaUpdateOne {
	return NewTodoSchemaClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TodoSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TodoSchema) Unwrap() *TodoSchema {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoSchema is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TodoSchema) String() string {
	var builder strings.Builder
	builder.WriteString("TodoSchema(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ts.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ts.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ts.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ts.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(ts.Body)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ts.Status))
	builder.WriteByte(')')
	return builder.String()
}

// TodoSchemas is a parsable slice of TodoSchema.
type TodoSchemas []*TodoSchema
