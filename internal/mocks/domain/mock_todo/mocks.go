// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_todo

import (
	"context"

	"github.com/iktakahiro/oniongo/internal/domain/todo"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTodoRepository creates a new instance of MockTodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoRepository {
	mock := &MockTodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTodoRepository is an autogenerated mock type for the TodoRepository type
type MockTodoRepository struct {
	mock.Mock
}

type MockTodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTodoRepository) EXPECT() *MockTodoRepository_Expecter {
	return &MockTodoRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTodoRepository
func (_mock *MockTodoRepository) Create(ctx context.Context, todo1 *todo.Todo) error {
	ret := _mock.Called(ctx, todo1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *todo.Todo) error); ok {
		r0 = returnFunc(ctx, todo1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTodoRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTodoRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - todo1
func (_e *MockTodoRepository_Expecter) Create(ctx interface{}, todo1 interface{}) *MockTodoRepository_Create_Call {
	return &MockTodoRepository_Create_Call{Call: _e.mock.On("Create", ctx, todo1)}
}

func (_c *MockTodoRepository_Create_Call) Run(run func(ctx context.Context, todo1 *todo.Todo)) *MockTodoRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*todo.Todo))
	})
	return _c
}

func (_c *MockTodoRepository_Create_Call) Return(err error) *MockTodoRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTodoRepository_Create_Call) RunAndReturn(run func(ctx context.Context, todo1 *todo.Todo) error) *MockTodoRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTodoRepository
func (_mock *MockTodoRepository) Delete(ctx context.Context, id todo.TodoID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, todo.TodoID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTodoRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTodoRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTodoRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockTodoRepository_Delete_Call {
	return &MockTodoRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTodoRepository_Delete_Call) Run(run func(ctx context.Context, id todo.TodoID)) *MockTodoRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(todo.TodoID))
	})
	return _c
}

func (_c *MockTodoRepository_Delete_Call) Return(err error) *MockTodoRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTodoRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id todo.TodoID) error) *MockTodoRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type MockTodoRepository
func (_mock *MockTodoRepository) FindAll(ctx context.Context) ([]*todo.Todo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*todo.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*todo.Todo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*todo.Todo); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*todo.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockTodoRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx
func (_e *MockTodoRepository_Expecter) FindAll(ctx interface{}) *MockTodoRepository_FindAll_Call {
	return &MockTodoRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockTodoRepository_FindAll_Call) Run(run func(ctx context.Context)) *MockTodoRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTodoRepository_FindAll_Call) Return(todos []*todo.Todo, err error) *MockTodoRepository_FindAll_Call {
	_c.Call.Return(todos, err)
	return _c
}

func (_c *MockTodoRepository_FindAll_Call) RunAndReturn(run func(ctx context.Context) ([]*todo.Todo, error)) *MockTodoRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function for the type MockTodoRepository
func (_mock *MockTodoRepository) FindByID(ctx context.Context, id todo.TodoID) (*todo.Todo, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *todo.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, todo.TodoID) (*todo.Todo, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, todo.TodoID) *todo.Todo); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*todo.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, todo.TodoID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockTodoRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTodoRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockTodoRepository_FindByID_Call {
	return &MockTodoRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockTodoRepository_FindByID_Call) Run(run func(ctx context.Context, id todo.TodoID)) *MockTodoRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(todo.TodoID))
	})
	return _c
}

func (_c *MockTodoRepository_FindByID_Call) Return(todo1 *todo.Todo, err error) *MockTodoRepository_FindByID_Call {
	_c.Call.Return(todo1, err)
	return _c
}

func (_c *MockTodoRepository_FindByID_Call) RunAndReturn(run func(ctx context.Context, id todo.TodoID) (*todo.Todo, error)) *MockTodoRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTodoRepository
func (_mock *MockTodoRepository) Update(ctx context.Context, todo1 *todo.Todo) error {
	ret := _mock.Called(ctx, todo1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *todo.Todo) error); ok {
		r0 = returnFunc(ctx, todo1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTodoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTodoRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - todo1
func (_e *MockTodoRepository_Expecter) Update(ctx interface{}, todo1 interface{}) *MockTodoRepository_Update_Call {
	return &MockTodoRepository_Update_Call{Call: _e.mock.On("Update", ctx, todo1)}
}

func (_c *MockTodoRepository_Update_Call) Run(run func(ctx context.Context, todo1 *todo.Todo)) *MockTodoRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*todo.Todo))
	})
	return _c
}

func (_c *MockTodoRepository_Update_Call) Return(err error) *MockTodoRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTodoRepository_Update_Call) RunAndReturn(run func(ctx context.Context, todo1 *todo.Todo) error) *MockTodoRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
