// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_uow

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTransactionRunner creates a new instance of MockTransactionRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRunner {
	mock := &MockTransactionRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTransactionRunner is an autogenerated mock type for the TransactionRunner type
type MockTransactionRunner struct {
	mock.Mock
}

type MockTransactionRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRunner) EXPECT() *MockTransactionRunner_Expecter {
	return &MockTransactionRunner_Expecter{mock: &_m.Mock}
}

// RunInTx provides a mock function for the type MockTransactionRunner
func (_mock *MockTransactionRunner) RunInTx(ctx context.Context, fn func(ctx context.Context) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunInTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(ctx context.Context) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTransactionRunner_RunInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInTx'
type MockTransactionRunner_RunInTx_Call struct {
	*mock.Call
}

// RunInTx is a helper method to define mock.On call
//   - ctx
//   - fn
func (_e *MockTransactionRunner_Expecter) RunInTx(ctx interface{}, fn interface{}) *MockTransactionRunner_RunInTx_Call {
	return &MockTransactionRunner_RunInTx_Call{Call: _e.mock.On("RunInTx", ctx, fn)}
}

func (_c *MockTransactionRunner_RunInTx_Call) Run(run func(ctx context.Context, fn func(ctx context.Context) error)) *MockTransactionRunner_RunInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(ctx context.Context) error))
	})
	return _c
}

func (_c *MockTransactionRunner_RunInTx_Call) Return(err error) *MockTransactionRunner_RunInTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTransactionRunner_RunInTx_Call) RunAndReturn(run func(ctx context.Context, fn func(ctx context.Context) error) error) *MockTransactionRunner_RunInTx_Call {
	_c.Call.Return(run)
	return _c
}
